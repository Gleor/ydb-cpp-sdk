diff -ruN postgresql/src/backend/libpq/pqformat.c postgresql.patched/src/backend/libpq/pqformat.c
--- postgresql/src/backend/libpq/pqformat.c	2022-04-27 13:46:38.390306879 +0300
+++ postgresql.patched/src/backend/libpq/pqformat.c	2022-04-27 13:46:00.669946758 +0300
@@ -78,6 +78,8 @@
 #include "mb/pg_wchar.h"
 #include "port/pg_bswap.h"
 
+extern void yql_canonize_float4(float4*);
+extern void yql_canonize_float8(float8*);
 
 /* --------------------------------
  *		pq_beginmessage		- initialize for sending a message
@@ -260,6 +262,7 @@
 	}			swap;
 
 	swap.f = f;
+	yql_canonize_float4(&swap.f);
 	pq_sendint32(buf, swap.i);
 }
 
@@ -284,6 +287,7 @@
 	}			swap;
 
 	swap.f = f;
+	yql_canonize_float8(&swap.f);
 	pq_sendint64(buf, swap.i);
 }
 
diff -ruN postgresql/src/backend/nodes/outfuncs.c postgresql.patched/src/backend/nodes/outfuncs.c
--- postgresql/src/backend/nodes/outfuncs.c	2022-04-27 13:46:35.862282750 +0300
+++ postgresql.patched/src/backend/nodes/outfuncs.c	2022-04-27 13:46:00.669946758 +0300
@@ -3489,6 +3489,20 @@
 }
 
 static void
+_outInsertStmt(StringInfo str, const InsertStmt *node)
+{
+    WRITE_NODE_TYPE("INSERTSTMT");
+
+    WRITE_NODE_FIELD(relation);
+    WRITE_NODE_FIELD(cols);
+    WRITE_NODE_FIELD(selectStmt);
+    WRITE_NODE_FIELD(onConflictClause);
+    WRITE_NODE_FIELD(returningList);
+    WRITE_NODE_FIELD(withClause);
+    WRITE_ENUM_FIELD(override, OverridingKind);
+}
+
+static void
 _outAConst(StringInfo str, const A_Const *node)
 {
 	WRITE_NODE_TYPE("A_CONST");
@@ -3823,6 +3837,30 @@
 	WRITE_LOCATION_FIELD(location);
 }
 
+static void
+_outOnConflictClause(StringInfo str, const OnConflictClause *node)
+{
+	WRITE_NODE_TYPE("ONCONFLICTCLAUSE");
+
+	WRITE_ENUM_FIELD(action, OnConflictAction);
+	WRITE_NODE_FIELD(infer);
+	WRITE_NODE_FIELD(targetList);
+	WRITE_NODE_FIELD(whereClause);
+	WRITE_LOCATION_FIELD(location);
+}
+
+
+static void
+_outInferClause(StringInfo str, const InferClause *node)
+{
+	WRITE_NODE_TYPE("INFERCLAUSE");
+
+	WRITE_NODE_FIELD(indexElems);
+	WRITE_NODE_FIELD(whereClause);
+	WRITE_STRING_FIELD(conname);
+	WRITE_LOCATION_FIELD(location);
+}
+
 /*
  * outNode -
  *	  converts a Node into ascii string and append it to 'str'
@@ -4444,6 +4482,9 @@
 			case T_RawStmt:
 				_outRawStmt(str, obj);
 				break;
+            case T_InsertStmt:
+			    _outInsertStmt(str, obj);
+			    break;
 			case T_A_Const:
 				_outAConst(str, obj);
 				break;
@@ -4522,6 +4563,12 @@
 			case T_PartitionRangeDatum:
 				_outPartitionRangeDatum(str, obj);
 				break;
+		        case T_OnConflictClause:
+			        _outOnConflictClause(str, obj);
+			        break;
+		        case T_InferClause:
+			        _outInferClause(str, obj);
+			        break;
 
 			default:
 
diff -ruN postgresql/src/backend/utils/mmgr/aset.c postgresql.patched/src/backend/utils/mmgr/aset.c
--- postgresql/src/backend/utils/mmgr/aset.c	2022-04-27 13:46:37.478298174 +0300
+++ postgresql.patched/src/backend/utils/mmgr/aset.c	2022-04-27 13:46:00.633946415 +0300
@@ -423,6 +423,8 @@
 	else
 		freeListIndex = -1;
 
+        freeListIndex = -1;
+
 	/*
 	 * If a suitable freelist entry exists, just recycle that context.
 	 */
diff -ruN postgresql/src/include/pg_config-win.h postgresql.patched/src/include/pg_config-win.h
--- postgresql/src/include/pg_config-win.h	2022-04-27 13:46:34.278267631 +0300
+++ postgresql.patched/src/include/pg_config-win.h	2022-04-27 13:46:00.537945498 +0300
@@ -12,7 +12,7 @@
 #undef HAVE_TERMIOS_H
 
 /* Define to 1 if you have the `inet_aton' function. */
-#undef HAVE_INET_ATON
+#define HAVE_INET_ATON 1
 
 /* Define to 1 if you have the <sys/select.h> header file. */
 #undef HAVE_SYS_SELECT_H
diff -ruN postgresql/src/include/port/atomics/generic-msvc.h postgresql.patched/src/include/port/atomics/generic-msvc.h
--- postgresql/src/include/port/atomics/generic-msvc.h	2022-04-27 13:46:34.666271335 +0300
+++ postgresql.patched/src/include/port/atomics/generic-msvc.h	2022-04-27 13:46:00.585945957 +0300
@@ -80,7 +80,7 @@
 {
 	bool	ret;
 	uint64	current;
-	current = _InterlockedCompareExchange64(&ptr->value, newval, *expected);
+	current = _InterlockedCompareExchange64((volatile __int64 *)&ptr->value, newval, *expected);
 	ret = current == *expected;
 	*expected = current;
 	return ret;
@@ -94,7 +94,7 @@
 static inline uint64
 pg_atomic_fetch_add_u64_impl(volatile pg_atomic_uint64 *ptr, int64 add_)
 {
-	return _InterlockedExchangeAdd64(&ptr->value, add_);
+	return _InterlockedExchangeAdd64((volatile __int64 *)&ptr->value, add_);
 }
 #endif /* _WIN64 */
 
diff -ruN postgresql/src/include/port/win32_port.h postgresql.patched/src/include/port/win32_port.h
--- postgresql/src/include/port/win32_port.h	2022-04-27 13:46:34.686271525 +0300
+++ postgresql.patched/src/include/port/win32_port.h	2022-04-27 13:46:00.585945957 +0300
@@ -53,8 +53,6 @@
 #undef near
 
 /* needed before sys/stat hacking below: */
-#define fstat microsoft_native_fstat
-#define stat microsoft_native_stat
 #include <sys/stat.h>
 #undef fstat
 #undef stat
diff -ruN postgresql/src/include/port.h postgresql.patched/src/include/port.h
--- postgresql/src/include/port.h	2022-04-27 13:46:34.306267898 +0300
+++ postgresql.patched/src/include/port.h	2022-04-27 13:46:00.537945498 +0300
@@ -14,8 +14,10 @@
 #define PG_PORT_H
 
 #include <ctype.h>
+#if !defined(WIN32)
 #include <netdb.h>
 #include <pwd.h>
+#endif
 
 /*
  * Windows has enough specialized port stuff that we push most of it off
diff -ruN postgresql/src/timezone/pgtz.c postgresql.patched/src/timezone/pgtz.c
--- postgresql/src/timezone/pgtz.c	2022-04-27 13:46:39.418316690 +0300
+++ postgresql.patched/src/timezone/pgtz.c	2022-04-27 13:46:00.689946950 +0300
@@ -197,6 +197,11 @@
 
 static __thread HTAB *timezone_cache = NULL;
 
+void destroy_timezone_hashtable() 
+{
+        hash_destroy(timezone_cache);
+        timezone_cache = NULL;
+}
 
 static bool
 init_timezone_hashtable(void)
