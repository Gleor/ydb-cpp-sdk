<sql-statement>
--
-- CASE
-- Test the case statement
--
CREATE TABLE CASE_TBL (
  i integer,
  f double precision
);
</sql-statement>
<sql-statement>
CREATE TABLE CASE2_TBL (
  i integer,
  j integer
);
</sql-statement>
<sql-statement>
INSERT INTO CASE_TBL VALUES (1, 10.1);
</sql-statement>
<sql-statement>
INSERT INTO CASE_TBL VALUES (2, 20.2);
</sql-statement>
<sql-statement>
INSERT INTO CASE_TBL VALUES (3, -30.3);
</sql-statement>
<sql-statement>
INSERT INTO CASE_TBL VALUES (4, NULL);
</sql-statement>
<sql-statement>
INSERT INTO CASE2_TBL VALUES (1, -1);
</sql-statement>
<sql-statement>
INSERT INTO CASE2_TBL VALUES (2, -2);
</sql-statement>
<sql-statement>
INSERT INTO CASE2_TBL VALUES (3, -3);
</sql-statement>
<sql-statement>
INSERT INTO CASE2_TBL VALUES (2, -4);
</sql-statement>
<sql-statement>
INSERT INTO CASE2_TBL VALUES (1, NULL);
</sql-statement>
<sql-statement>
INSERT INTO CASE2_TBL VALUES (NULL, -6);
</sql-statement>
<sql-statement>
--
-- Simplest examples without tables
--
SELECT '3' AS "One",
  CASE
    WHEN 1 < 2 THEN 3
  END AS "Simple WHEN";
</sql-statement>
<sql-statement>
SELECT '<NULL>' AS "One",
  CASE
    WHEN 1 > 2 THEN 3
  END AS "Simple default";
</sql-statement>
BackTrace(void**, unsigned long)+29 (0x14033ECD)
TBackTrace::Capture()+30 (0x1403443E)
TWithBackTrace<yexception>::TWithBackTrace<>()+72 (0x13FD0568)
NYT::TNode::TTypeError::TTypeError()+25 (0x144DC3E9)
NYT::TNode::CheckType(NYT::TNode::EType) const+267 (0x144DD9BB)
NYT::TNode::AsString() const+30 (0x144DC53E)
WriteTableToStream(IOutputStream&, TVector<NYT::TNode, std::__y1::allocator<NYT::TNode> > const&, TVector<NYT::TNode, std::__y1::allocator<NYT::TNode> > const&)+830 (0x13EBBB7E)
Main(int, char**)+5748 (0x13EC0FB4)
main+273 (0x13EC2761)
??+0 (0x7F062DE29D90)
__libc_start_main+128 (0x7F062DE29E40)
??+0 (0x13E4C029)

(NYT::TNode::TTypeError) library/cpp/yson/node/node.cpp:829: TNode type string_node expected, actual type null
