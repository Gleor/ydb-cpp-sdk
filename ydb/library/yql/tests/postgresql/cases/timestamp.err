<sql-statement>
--
-- TIMESTAMP
--
CREATE TABLE TIMESTAMP_TBL (d1 timestamp(2) without time zone);
</sql-statement>
<sql-statement>
-- Test shorthand input values
-- We can't just "select" the results since they aren't constants; test for
-- equality instead.  We can do that by running the test inside a transaction
-- block, within which the value of 'now' shouldn't change, and so these
-- related values shouldn't either.
BEGIN;
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('today');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('yesterday');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow');
</sql-statement>
<sql-statement>
-- time zone should be ignored by this data type
INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow EST');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow zulu');
</sql-statement>
<sql-statement>
SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'today';
</sql-statement>
<sql-statement>
SELECT count(*) AS Three FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'tomorrow';
</sql-statement>
<sql-statement>
SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'yesterday';
</sql-statement>
<sql-statement>
COMMIT;
</sql-statement>
<sql-statement>
DELETE FROM TIMESTAMP_TBL;
</sql-statement>
-stdin-:<main>: Fatal: Pre type annotation

    -stdin-:<main>: Fatal: tools/enum_parser/enum_serialization_runtime/enum_runtime.cpp:70: Key 'pg_delete' not found in enum NYql::EYtSettingType. Valid options are: 'initial', 'infer_scheme', 'force_infer_schema', 'do_not_fail_on_invalid_schema', 'direct_read', 'view', 'mode', 'scheme', 'weak_concat', 'anonymous', 'with_qb', 'inline', 'sample', 'joinLabel', 'ignore_non_existing', 'warn_non_existing', 'xlock', 'unordered', 'nonUnique', 'userschema', 'usercolumns', 'statcolumns', 'syscolumns', 'ignoretypev3', 'memUsage', 'itemsCount', 'rowFactor', 'ordered', 'keyFilter', 'keyFilter2', 'take', 'skip', 'limit', 'sortLimitBy', 'sortBy', 'reduceBy', 'reduceFilterBy', 'forceTransform', 'weakFields', 'sharded', 'combineChunks', 'jobCount', 'joinReduce', 'firstAsPrimary', 'flow', 'keepSorted', 'keySwitch', 'uniqueBy', 'opHash', 'mapOutputType', 'reduceInputType', 'noDq', 'split', 'compression_codec', 'erasure_codec', 'expiration', 'replication_factor', 'user_attrs', 'media', 'primary_medium', 'keep_meta', 'monotonic_keys'. 
    
<sql-statement>
-- Verify that 'now' *does* change over a reasonable interval such as 100 msec,
-- and that it doesn't change over the same interval within a transaction block
INSERT INTO TIMESTAMP_TBL VALUES ('now');
</sql-statement>
<sql-statement>
SELECT pg_sleep(0.1);
</sql-statement>
<sql-statement>
BEGIN;
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('now');
</sql-statement>
<sql-statement>
SELECT pg_sleep(0.1);
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('now');
</sql-statement>
<sql-statement>
SELECT pg_sleep(0.1);
</sql-statement>
<sql-statement>
SELECT count(*) AS two FROM TIMESTAMP_TBL WHERE d1 = timestamp(2) without time zone 'now';
</sql-statement>
<sql-statement>
SELECT count(d1) AS three, count(DISTINCT d1) AS two FROM TIMESTAMP_TBL;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtMapReduce!
    	SELECT count(d1) AS three, count(DISTINCT d1) AS two FROM TIMESTAMP_TBL;
	^
        -stdin-:<main>:1:1: Fatal: Failed to unwrap empty optional
        	SELECT count(d1) AS three, count(DISTINCT d1) AS two FROM TIMESTAMP_TBL;
	^
<sql-statement>
COMMIT;
</sql-statement>
<sql-statement>
TRUNCATE TIMESTAMP_TBL;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RawStmt: alternative is not implemented yet : 257
    	TRUNCATE TIMESTAMP_TBL;
	^
<sql-statement>
-- Special values
INSERT INTO TIMESTAMP_TBL VALUES ('-infinity');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('infinity');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('epoch');
</sql-statement>
<sql-statement>
-- Postgres v6.0 standard output format
INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01 1997 PST');
</sql-statement>
<sql-statement>
-- Variations on Postgres v6.1 standard output format
INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.000001 1997 PST');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.999999 1997 PST');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.4 1997 PST');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.5 1997 PST');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.6 1997 PST');
</sql-statement>
<sql-statement>
-- ISO 8601 format
INSERT INTO TIMESTAMP_TBL VALUES ('1997-01-02');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('1997-01-02 03:04:05');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('1997-02-10 17:32:01-08');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('1997-02-10 17:32:01-0800');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('1997-02-10 17:32:01 -08:00');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('19970210 173201 -0800');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('1997-06-10 17:32:01 -07:00');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('2001-09-22T18:19:20');
</sql-statement>
<sql-statement>
-- POSIX format (note that the timezone abbrev is just decoration here)
INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 08:14:01 GMT+8');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 13:14:02 GMT-1');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 12:14:03 GMT-2');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 03:14:04 PST+8');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 02:14:05 MST+7:00');
</sql-statement>
<sql-statement>
-- Variations for acceptable input formats
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 10 17:32:01 1997 -0800');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 10 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 10 5:32PM 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('1997/02/10 17:32:01-0800');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('1997-02-10 17:32:01 PST');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb-10-1997 17:32:01 PST');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('02-10-1997 17:32:01 PST');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('19970210 173201 PST');
</sql-statement>
<sql-statement>
set datestyle to ymd;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: VariableSetStmt, not supported name: datestyle
    	set datestyle to ymd;
	^
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('97FEB10 5:32:01PM UTC');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('97/02/10 17:32:01 UTC');
</sql-statement>
<sql-statement>
reset datestyle;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: VariableSetStmt, not supported kind: 4
    	reset datestyle;
	^
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('1997.041 17:32:01 UTC');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('19970210 173201 America/New_York');
</sql-statement>
<sql-statement>
-- this fails (even though TZ is a no-op, we still look it up)
INSERT INTO TIMESTAMP_TBL VALUES ('19970710 173201 America/Does_not_exist');
</sql-statement>
<sql-statement>
-- Check date conversion and date arithmetic
INSERT INTO TIMESTAMP_TBL VALUES ('1997-06-10 18:32:01 PDT');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 10 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 11 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 12 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 13 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 14 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 15 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 0097 BC');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 0097');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 0597');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1097');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1697');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1797');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1897');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 2097');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 28 17:32:01 1996');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 29 17:32:01 1996');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Mar 01 17:32:01 1996');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Dec 30 17:32:01 1996');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Dec 31 17:32:01 1996');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Jan 01 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 28 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 29 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Mar 01 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Dec 30 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Dec 31 17:32:01 1997');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Dec 31 17:32:01 1999');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Jan 01 17:32:01 2000');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Dec 31 17:32:01 2000');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Jan 01 17:32:01 2001');
</sql-statement>
<sql-statement>
-- Currently unsupported syntax and ranges
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 -0097');
</sql-statement>
<sql-statement>
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 5097 BC');
</sql-statement>
<sql-statement>
SELECT d1 FROM TIMESTAMP_TBL;
</sql-statement>
BackTrace(void**, unsigned long)+29 (0x14033ECD)
TBackTrace::Capture()+30 (0x1403443E)
TWithBackTrace<yexception>::TWithBackTrace<>()+72 (0x13FD0568)
NYT::TNode::TTypeError::TTypeError()+25 (0x144DC3E9)
NYT::TNode::CheckType(NYT::TNode::EType) const+267 (0x144DD9BB)
NYT::TNode::AsString() const+30 (0x144DC53E)
WriteTableToStream(IOutputStream&, TVector<NYT::TNode, std::__y1::allocator<NYT::TNode> > const&, TVector<NYT::TNode, std::__y1::allocator<NYT::TNode> > const&)+830 (0x13EBBB7E)
Main(int, char**)+5748 (0x13EC0FB4)
main+273 (0x13EC2761)
??+0 (0x7F5DA6429D90)
__libc_start_main+128 (0x7F5DA6429E40)
??+0 (0x13E4C029)

(NYT::TNode::TTypeError) library/cpp/yson/node/node.cpp:829: TNode type string_node expected, actual type null
