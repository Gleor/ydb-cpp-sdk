<sql-statement>
--
-- SELECT_HAVING
--
-- load test data
CREATE TABLE test_having (a int, b int, c char(8), d char);
</sql-statement>
<sql-statement>
INSERT INTO test_having VALUES (0, 1, 'XXXX', 'A');
</sql-statement>
<sql-statement>
INSERT INTO test_having VALUES (1, 2, 'AAAA', 'b');
</sql-statement>
<sql-statement>
INSERT INTO test_having VALUES (2, 2, 'AAAA', 'c');
</sql-statement>
<sql-statement>
INSERT INTO test_having VALUES (3, 3, 'BBBB', 'D');
</sql-statement>
<sql-statement>
INSERT INTO test_having VALUES (4, 3, 'BBBB', 'e');
</sql-statement>
<sql-statement>
INSERT INTO test_having VALUES (5, 3, 'bbbb', 'F');
</sql-statement>
<sql-statement>
INSERT INTO test_having VALUES (6, 4, 'cccc', 'g');
</sql-statement>
<sql-statement>
INSERT INTO test_having VALUES (7, 4, 'cccc', 'h');
</sql-statement>
<sql-statement>
INSERT INTO test_having VALUES (8, 4, 'CCCC', 'I');
</sql-statement>
<sql-statement>
INSERT INTO test_having VALUES (9, 4, 'CCCC', 'j');
</sql-statement>
<sql-statement>
SELECT b, c FROM test_having
	GROUP BY b, c HAVING count(*) = 1 ORDER BY b, c;
</sql-statement>
<sql-statement>
-- HAVING is effectively equivalent to WHERE in this case
SELECT b, c FROM test_having
	GROUP BY b, c HAVING b = 3 ORDER BY b, c;
</sql-statement>
<sql-statement>
SELECT lower(c), count(c) FROM test_having
	GROUP BY lower(c) HAVING count(*) > 2 OR min(a) = max(a)
	ORDER BY lower(c);
</sql-statement>
BackTrace(void**, unsigned long)+29 (0x14033ECD)
TBackTrace::Capture()+30 (0x1403443E)
TWithBackTrace<yexception>::TWithBackTrace<>()+72 (0x13FD0568)
NYT::TNode::TTypeError::TTypeError()+25 (0x144DC3E9)
NYT::TNode::CheckType(NYT::TNode::EType) const+267 (0x144DD9BB)
NYT::TNode::AsString() const+30 (0x144DC53E)
WriteTableToStream(IOutputStream&, TVector<NYT::TNode, std::__y1::allocator<NYT::TNode> > const&, TVector<NYT::TNode, std::__y1::allocator<NYT::TNode> > const&)+830 (0x13EBBB7E)
Main(int, char**)+5748 (0x13EC0FB4)
main+273 (0x13EC2761)
??+0 (0x7FF013429D90)
__libc_start_main+128 (0x7FF013429E40)
??+0 (0x13E4C029)

(NYT::TNode::TTypeError) library/cpp/yson/node/node.cpp:829: TNode type string_node expected, actual type null
