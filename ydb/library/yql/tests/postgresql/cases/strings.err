<sql-statement>
--
-- STRINGS
-- Test various data entry syntaxes.
--
-- SQL string continuation syntax
-- E021-03 character string literals
SELECT 'first line'
' - next line'
	' - third line'
	AS "Three lines to one";
</sql-statement>
<sql-statement>
-- illegal string continuation syntax
SELECT 'first line'
' - next line' /* this comment is not allowed here */
' - third line'
	AS "Illegal comment within continuation";
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:4:1: Error: ERROR:  syntax error at or near "' - third line'"

    	' - third line'
	^
<sql-statement>
-- Unicode escapes
SET standard_conforming_strings TO on;
</sql-statement>
<sql-statement>
SELECT U&'d\0061t\+000061' AS U&"d\0061t\+000061";
</sql-statement>
<sql-statement>
SELECT U&'d!0061t\+000061' UESCAPE '!' AS U&"d*0061t\+000061" UESCAPE '*';
</sql-statement>
<sql-statement>
SELECT U&'a\\b' AS "a\b";
</sql-statement>
<sql-statement>
SELECT U&' \' UESCAPE '!' AS "tricky";
</sql-statement>
<sql-statement>
SELECT 'tricky' AS U&"\" UESCAPE '!';
</sql-statement>
<sql-statement>
SELECT U&'wrong: \061';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:19: Error: ERROR:  invalid Unicode escape

    	SELECT U&'wrong: \061';
	                  ^
<sql-statement>
SELECT U&'wrong: \+0061';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:19: Error: ERROR:  invalid Unicode escape

    	SELECT U&'wrong: \+0061';
	                  ^
<sql-statement>
SELECT U&'wrong: +0061' UESCAPE +;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:34: Error: ERROR:  UESCAPE must be followed by a simple string literal at or near "+"

    	SELECT U&'wrong: +0061' UESCAPE +;
	                                 ^
<sql-statement>
SELECT U&'wrong: +0061' UESCAPE '+';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:34: Error: ERROR:  invalid Unicode escape character at or near "'+'"

    	SELECT U&'wrong: +0061' UESCAPE '+';
	                                 ^
<sql-statement>
SELECT U&'wrong: \db99';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:24: Error: ERROR:  invalid Unicode surrogate pair

    	SELECT U&'wrong: \db99';
	                       ^
<sql-statement>
SELECT U&'wrong: \db99xy';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:24: Error: ERROR:  invalid Unicode surrogate pair

    	SELECT U&'wrong: \db99xy';
	                       ^
<sql-statement>
SELECT U&'wrong: \db99\\';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:24: Error: ERROR:  invalid Unicode surrogate pair

    	SELECT U&'wrong: \db99\\';
	                       ^
<sql-statement>
SELECT U&'wrong: \db99\0061';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:24: Error: ERROR:  invalid Unicode surrogate pair

    	SELECT U&'wrong: \db99\0061';
	                       ^
<sql-statement>
SELECT U&'wrong: \+00db99\+000061';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:27: Error: ERROR:  invalid Unicode surrogate pair

    	SELECT U&'wrong: \+00db99\+000061';
	                          ^
<sql-statement>
SELECT U&'wrong: \+2FFFFF';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:19: Error: ERROR:  invalid Unicode escape value

    	SELECT U&'wrong: \+2FFFFF';
	                  ^
<sql-statement>
-- while we're here, check the same cases in E-style literals
SELECT E'd\u0061t\U00000061' AS "data";
</sql-statement>
<sql-statement>
SELECT E'a\\b' AS "a\b";
</sql-statement>
<sql-statement>
SELECT E'wrong: \u061';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:18: Error: ERROR:  invalid Unicode escape

    	SELECT E'wrong: \u061';
	                 ^
<sql-statement>
SELECT E'wrong: \U0061';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:18: Error: ERROR:  invalid Unicode escape

    	SELECT E'wrong: \U0061';
	                 ^
<sql-statement>
SELECT E'wrong: \udb99';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:24: Error: ERROR:  invalid Unicode surrogate pair at or near "'"

    	SELECT E'wrong: \udb99';
	                       ^
<sql-statement>
SELECT E'wrong: \udb99xy';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:24: Error: ERROR:  invalid Unicode surrogate pair at or near "x"

    	SELECT E'wrong: \udb99xy';
	                       ^
<sql-statement>
SELECT E'wrong: \udb99\\';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:24: Error: ERROR:  invalid Unicode surrogate pair at or near "\"

    	SELECT E'wrong: \udb99\\';
	                       ^
<sql-statement>
SELECT E'wrong: \udb99\u0061';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:24: Error: ERROR:  invalid Unicode surrogate pair at or near "\u0061"

    	SELECT E'wrong: \udb99\u0061';
	                       ^
<sql-statement>
SELECT E'wrong: \U0000db99\U00000061';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:28: Error: ERROR:  invalid Unicode surrogate pair at or near "\U00000061"

    	SELECT E'wrong: \U0000db99\U00000061';
	                           ^
<sql-statement>
SELECT E'wrong: \U002FFFFF';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:18: Error: ERROR:  invalid Unicode escape value at or near "\U002FFFFF"

    	SELECT E'wrong: \U002FFFFF';
	                 ^
<sql-statement>
SET standard_conforming_strings TO off;
</sql-statement>
<sql-statement>
SELECT U&'d\0061t\+000061' AS U&"d\0061t\+000061";
</sql-statement>
<sql-statement>
SELECT U&'d!0061t\+000061' UESCAPE '!' AS U&"d*0061t\+000061" UESCAPE '*';
</sql-statement>
<sql-statement>
SELECT U&' \' UESCAPE '!' AS "tricky";
</sql-statement>
<sql-statement>
SELECT 'tricky' AS U&"\" UESCAPE '!';
</sql-statement>
<sql-statement>
SELECT U&'wrong: \061';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:19: Error: ERROR:  invalid Unicode escape

    	SELECT U&'wrong: \061';
	                  ^
<sql-statement>
SELECT U&'wrong: \+0061';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:19: Error: ERROR:  invalid Unicode escape

    	SELECT U&'wrong: \+0061';
	                  ^
<sql-statement>
SELECT U&'wrong: +0061' UESCAPE '+';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:34: Error: ERROR:  invalid Unicode escape character at or near "'+'"

    	SELECT U&'wrong: +0061' UESCAPE '+';
	                                 ^
<sql-statement>
RESET standard_conforming_strings;
</sql-statement>
<sql-statement>
-- bytea
SET bytea_output TO hex;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: VariableSetStmt, not supported name: bytea_output
    	-- bytea
	^
<sql-statement>
SELECT E'\\xDeAdBeEf'::bytea;
</sql-statement>
BackTrace(void**, unsigned long)+29 (0x14033ECD)
TBackTrace::Capture()+30 (0x1403443E)
TWithBackTrace<yexception>::TWithBackTrace<>()+72 (0x13FD0568)
NYT::TNode::TTypeError::TTypeError()+25 (0x144DC3E9)
NYT::TNode::CheckType(NYT::TNode::EType) const+267 (0x144DD9BB)
NYT::TNode::AsString() const+30 (0x144DC53E)
WriteTableToStream(IOutputStream&, TVector<NYT::TNode, std::__y1::allocator<NYT::TNode> > const&, TVector<NYT::TNode, std::__y1::allocator<NYT::TNode> > const&)+830 (0x13EBBB7E)
Main(int, char**)+5748 (0x13EC0FB4)
main+273 (0x13EC2761)
??+0 (0x7F5874229D90)
__libc_start_main+128 (0x7F5874229E40)
??+0 (0x13E4C029)

(NYT::TNode::TTypeError) library/cpp/yson/node/node.cpp:829: TNode type string_node expected, actual type list_node
